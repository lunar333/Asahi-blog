{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u4e2a\u4eba\u7b97\u6cd5\u535a\u5ba2","text":"<p>\u8fd9\u662f\u6211\u7684\u7b97\u6cd5\u7b14\u8bb0\u535a\u5ba2\uff0c\u8bb0\u5f55\u4e86\u5404\u79cd\u7b97\u6cd5\u9898\u89e3\u4e0e\u5b66\u4e60\u5fc3\u5f97\u3002</p>"},{"location":"%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/","title":"\u4e8c\u5206\u641c\u7d22","text":""},{"location":"%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/#_1","title":"\u4e8c\u5206\u641c\u7d22","text":""},{"location":"%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/#n-nums-target-nums-target-1","title":"\u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u5143\u7d20\u6709\u5e8f\u7684\uff08\u5347\u5e8f\uff09\u6574\u578b\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target  \uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u641c\u7d22 nums \u4e2d\u7684 target\uff0c\u5982\u679c\u76ee\u6807\u503c\u5b58\u5728\u8fd4\u56de\u4e0b\u6807\uff0c\u5426\u5219\u8fd4\u56de -1\u3002","text":"<pre><code>class Solution:\n    def search(self, nums: List[int], target: int) -&gt; int:\n        left = 0\n        right = len(nums)-1\n        while(left &lt;= right):\n            middle = (left+right)// 2\n            if (target&lt; nums[middle]):\n                right = middle - 1\n            elif (target &gt; nums[middle]):\n                left = middle + 1\n            else:\n                return middle\n        return -1\n</code></pre>"},{"location":"%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/#_2","title":"\u5b66\u4f1a\u4e86\u5de6\u95ed\u53f3\u95ed\uff0c\u548c\u5de6\u95ed\u53f3\u5f00\u7684\u5199\u6cd5\uff0c\u5176\u5b9e\u5c31\u662f\u4eba\u4e3a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u641c\u7d22\u533a\u95f4\uff0c\u5199\u4e34\u754c\u6761\u4ef6\u65f6\u5019\u5c31\u770b\u533a\u95f4\u80fd\u4e0d\u80fd\u53d6\u5230\u5c31\u53ef\u4ee5","text":""},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88%E9%A2%98%E7%9B%AE/","title":"\u53cc\u6307\u9488\u9898\u76ee","text":""},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88%E9%A2%98%E7%9B%AE/#_1","title":"\u79fb\u9664\u5143\u7d20","text":""},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88%E9%A2%98%E7%9B%AE/#nums-val-val-nums-val","title":"\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u503c val\uff0c\u4f60\u9700\u8981 \u539f\u5730 \u79fb\u9664\u6240\u6709\u6570\u503c\u7b49\u4e8e val \u7684\u5143\u7d20\u3002\u5143\u7d20\u7684\u987a\u5e8f\u53ef\u80fd\u53d1\u751f\u6539\u53d8\u3002\u7136\u540e\u8fd4\u56de nums \u4e2d\u4e0e val \u4e0d\u540c\u7684\u5143\u7d20\u7684\u6570\u91cf\u3002","text":""},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88%E9%A2%98%E7%9B%AE/#pythonforrangecforsizewhile","title":"\u66b4\u529b\u89e3\u6cd5\u8981\u6ce8\u610fpython\u91cc\u9762for\u5faa\u73afrange\u662f\u56fa\u5b9a\u7684\uff0c\u4e0d\u80fd\u50cfc\u4e00\u6837\u901a\u8fc7\u63a7\u5236for\u5faa\u73af\u91cc\u9762\u7684size\u63a7\u5236\u5faa\u73af\u6b21\u6570\uff0c\u53ea\u80fd\u7528while\u5faa\u73af","text":"<pre><code>class Solution:\n    def removeElement(self, nums: List[int], val: int) -&gt; int:\n        cishu = 0\n        i = 0\n        size = len(nums)\n        while (i&lt;size):\n            if nums[i]==val:\n                for j in range(i+1,size):\n                    nums[j-1] = nums[j]\n                size -= 1\n                cishu += 1\n\n            else:\n                i += 1\n        return size\n</code></pre>"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88%E9%A2%98%E7%9B%AE/#_2","title":"\u53cc\u6307\u9488\u89e3\u6cd5\uff0c\u901a\u8fc7\u5feb\u6162\u6307\u9488\u6765\u5b9e\u73b0\uff0c\u5feb\u6307\u9488\u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u6162\u6307\u9488\u8bb0\u5f55\u65b0\u6570\u7ec4\u7684\u4f4d\u7f6e","text":"<pre><code>class Solution:\n    def removeElement(self, nums: List[int], val: int) -&gt; int:\n        left = 0 \n        for i in range (len(nums)):\n            if (nums[i]!=val):\n                nums[left] = nums[i]\n                left += 1 \n\n        return left\n</code></pre>"},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88%E9%A2%98%E7%9B%AE/#_3","title":"\u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9","text":""},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88%E9%A2%98%E7%9B%AE/#nums","title":"\u7ed9\u4f60\u4e00\u4e2a\u6309\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u8fd4\u56de \u6bcf\u4e2a\u6570\u5b57\u7684\u5e73\u65b9 \u7ec4\u6210\u7684\u65b0\u6570\u7ec4\uff0c\u8981\u6c42\u4e5f\u6309 \u975e\u9012\u51cf\u987a\u5e8f \u6392\u5e8f\u3002","text":""},{"location":"%E5%8F%8C%E6%8C%87%E9%92%88%E9%A2%98%E7%9B%AE/#_4","title":"\u5173\u952e\u5728\u4e8e\u5927\u7684\u4e00\u5b9a\u5728\u4e24\u8fb9\uff0c\u901a\u8fc7\u53cc\u6307\u9488\u8fdb\u884c\u904d\u5386\uff0c\u7136\u540e\u5c06\u5927\u7684\u503c\u653e\u5230\u65b0\u6570\u7ec4\u7684\u672b\u7aef","text":"<pre><code>class Solution:\n    def sortedSquares(self, nums: List[int]) -&gt; List[int]:\n        size = len(nums)-1\n        right = size\n        left = 0\n        result = [0] * len(nums)  # \u521d\u59cb\u5316 result \u5217\u8868\uff0c\u957f\u5ea6\u4e0e nums \u4e00\u6837\n        while(left&lt;=right):\n            if (nums[left]*nums[left]&gt;nums[right]*nums[right]):\n                result[size]=nums[left]*nums[left]\n                left += 1\n                size -= 1\n            else:\n                result[size] = nums[right]*nums[right]\n                right -= 1\n                size -= 1\n\n        return result\n</code></pre>"},{"location":"%E6%A8%A1%E6%8B%9F%E8%BF%87%E7%A8%8B%E9%A2%98%E7%9B%AE/","title":"\u6a21\u62df\u8fc7\u7a0b\u9898\u76ee","text":""},{"location":"%E6%A8%A1%E6%8B%9F%E8%BF%87%E7%A8%8B%E9%A2%98%E7%9B%AE/#_1","title":"\u87ba\u65cb\u77e9\u9635","text":""},{"location":"%E6%A8%A1%E6%8B%9F%E8%BF%87%E7%A8%8B%E9%A2%98%E7%9B%AE/#n-1-n2-n-x-n-matrix","title":"\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u751f\u6210\u4e00\u4e2a\u5305\u542b 1 \u5230 n2 \u6240\u6709\u5143\u7d20\uff0c\u4e14\u5143\u7d20\u6309\u987a\u65f6\u9488\u987a\u5e8f\u87ba\u65cb\u6392\u5217\u7684 n x n \u6b63\u65b9\u5f62\u77e9\u9635 matrix \u3002","text":""},{"location":"%E6%A8%A1%E6%8B%9F%E8%BF%87%E7%A8%8B%E9%A2%98%E7%9B%AE/#gpt","title":"\u770b\u89c6\u9891\u5927\u6982\u77e5\u9053\u601d\u8def\u4e86\uff0c\u4f46\u662f\u81ea\u5df1\u5199\u7684\u65f6\u5019\uff0c\u8fd8\u662f\u9047\u5230\u4e86\u56f0\u96be\uff0c\u7528\u7684gpt\u751f\u6210\u7684\u7b54\u6848\u6700\u540e\uff0c\u540e\u9762\u6709\u65f6\u95f4\u81ea\u5df1\u518d\u5199\u4e00\u4e0b\u8fd9\u4e2a\u7a0b\u5e8f","text":"<p>```python class Solution:     def generateMatrix(self, n: int) -&gt; List[List[int]]:         if n == 0:             return []</p> <pre><code>    matrix = [[0] * n for _ in range(n)]\n    num = 1\n    layers = n // 2  # \u4ec5\u8ba1\u7b97\u5230\u6700\u5185\u5c42\u4e4b\u524d\u7684\u5c42\u6570\n\n    for layer in range(layers):\n        # \u4ece\u5de6\u5230\u53f3\u586b\u5145\u4e0a\u8fb9\u754c\n        for i in range(layer, n - layer):\n            matrix[layer][i] = num\n            num += 1\n\n        # \u4ece\u4e0a\u5230\u4e0b\u586b\u5145\u53f3\u8fb9\u754c\n        for i in range(layer + 1, n - layer):\n            matrix[i][n - layer - 1] = num\n            num += 1\n\n        # \u4ece\u53f3\u5230\u5de6\u586b\u5145\u4e0b\u8fb9\u754c\n        for i in range(n - layer - 2, layer - 1, -1):\n            matrix[n - layer - 1][i] = num\n            num += 1\n\n        # \u4ece\u4e0b\u5230\u4e0a\u586b\u5145\u5de6\u8fb9\u754c\n        for i in range(n - layer - 2, layer, -1):\n            matrix[i][layer] = num\n            num += 1\n\n    # \u5982\u679c\u77e9\u9635\u7ef4\u6570\u4e3a\u5947\u6570\uff0c\u586b\u5145\u4e2d\u5fc3\u5143\u7d20\n    if n % 2 != 0:\n        matrix[n // 2][n // 2] = num\n\n    return matrix\n</code></pre>"},{"location":"%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E9%A2%98%E7%9B%AE/","title":"\u6ed1\u52a8\u7a97\u53e3\u9898\u76ee","text":""},{"location":"%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E9%A2%98%E7%9B%AE/#_1","title":"\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","text":""},{"location":"%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E9%A2%98%E7%9B%AE/#n-target-target-numsl-numsl1-numsr-1-numsr-0","title":"\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709 n \u4e2a\u6b63\u6574\u6570\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6b63\u6574\u6570 target \u3002\u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u603b\u548c\u5927\u4e8e\u7b49\u4e8e target \u7684\u957f\u5ea6\u6700\u5c0f\u7684 \u5b50\u6570\u7ec4[numsl, numsl+1, ..., numsr-1, numsr] \uff0c\u5e76\u8fd4\u56de\u5176\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u5b58\u5728\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de 0 \u3002","text":""},{"location":"%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E9%A2%98%E7%9B%AE/#_2","title":"\u6ed1\u52a8\u7a97\u53e3\u7684\u9898\u76ee\u771f\u7684\u633a\u7075\u6d3b\u7684\uff0c\u4e4b\u524d\u4e00\u76f4\u4ee5\u4e3a\u6ed1\u52a8\u7a97\u53e3\u5c31\u662f\u5de6\u6307\u9488\u5728\u6570\u7ec4\u6700\u5de6\u8fb9\uff0c\u53f3\u6307\u9488\u5728\u6700\u53f3\u8fb9\uff0c\u4f46\u662f\u5176\u5b9e\u6ed1\u52a8\u7a97\u53e3\u53ef\u4ee5\u662f\u90fd\u5728\u4e00\u4fa7\u7684\u6307\u9488\uff0c\u5148\u79fb\u52a8\u7b2c\u4e00\u4e2a\u6307\u9488\uff0c\u8fbe\u6210\u9898\u76ee\u6761\u4ef6\uff0c\u518d\u79fb\u52a8\u53e6\u5916\u7684\u6307\u9488","text":"<pre><code>class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -&gt; int:\n        left = 0\n        sums = 0\n        result = float(inf)\n        for j in range(len(nums)):\n            sums += nums[j]\n            while (sums &gt;= target):\n                result = min(result,j - left + 1)\n                sums -= nums[left]\n                left += 1\n        if result == float(inf):\n            return 0\n\n        return result \n</code></pre>"}]}